{"version":3,"sources":["../index.js"],"names":["plot","data","elm","title","ysample","key","line","$","highcharts","colors","chart","type","text","xAxis","yAxis","series","name","_","map","row","date","Date","datetime","get","done","parsed","trim","split","d","JSON","parse","fat","weight","bmi"],"mappings":";;AAAA,IAAMA,IAAI,GAAG,SAAPA,IAAO,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBC,OAAnB,EAA4BC,GAA5B,EAAiCC,IAAjC;AAAA,SAA0CC,CAAC,CAACL,GAAD,CAAD,CAAOM,UAAP,CAAkB;AACvEC,IAAAA,MAAM,EAAE,CAACH,IAAD,CAD+D;AAEvEI,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE;AADD,KAFgE;AAKvER,IAAAA,KAAK,EAAE;AACLS,MAAAA,IAAI,EAAET;AADD,KALgE;AAQvEU,IAAAA,KAAK,EAAE;AACLF,MAAAA,IAAI,EAAE,UADD;AAELR,MAAAA,KAAK,EAAE;AACLS,QAAAA,IAAI,EAAE;AADD;AAFF,KARgE;AAcvEE,IAAAA,KAAK,EAAE;AACLX,MAAAA,KAAK,EAAE;AACLS,QAAAA,IAAI,EAAER;AADD;AADF,KAdgE;AAmBvEW,IAAAA,MAAM,EAAE,CAAC;AACPC,MAAAA,IAAI,EAAEb,KADC;AAEPF,MAAAA,IAAI,EAAEgB,CAAC,CAACC,GAAF,CAAMjB,IAAN,EAAY,UAASkB,GAAT,EAAa;AAC7B,YAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,GAAG,CAACG,QAAb,CAAb;AACA,eAAO,CAAEF,IAAF,EAAQD,GAAG,CAACd,GAAD,CAAX,CAAP;AACD,OAHK;AAFC,KAAD;AAnB+D,GAAlB,CAA1C;AAAA,CAAb;;AA4BAE,CAAC,CAACgB,GAAF,CAAM,wEAAN,EAAgFC,IAAhF,CAAqF,UAASvB,IAAT,EAAc;AACjG,MAAMwB,MAAM,GAAGxB,IAAI,CAACyB,IAAL,GAAYC,KAAZ,CAAkB,IAAlB,EAAwBT,GAAxB,CAA4B,UAASU,CAAT,EAAY;AACrD,QAAIH,MAAM,GAAGI,IAAI,CAACC,KAAL,CAAWF,CAAX,CAAb;;AACA,QAAIH,MAAM,CAACM,GAAX,EAAgB;AACdN,MAAAA,MAAM,CAACM,GAAP,GAAaN,MAAM,CAACM,GAAP,GAAaN,MAAM,CAACO,MAApB,GAA6B,GAA1C;AACD;;AACDP,IAAAA,MAAM,CAACQ,GAAP,GAAaR,MAAM,CAACO,MAAP,GAAgB,IAAhB,GAAuB,IAApC;AACA,WAAOP,MAAP;AACD,GAPc,CAAf;AAQAzB,EAAAA,IAAI,CAACyB,MAAD,EAAS,SAAT,EAAoB,QAApB,EAA8B,aAA9B,EAA6C,QAA7C,EAAuD,SAAvD,CAAJ;AACAzB,EAAAA,IAAI,CAACyB,MAAD,EAAS,MAAT,EAAoB,KAApB,EAA8B,KAA9B,EAA6C,KAA7C,EAAuD,SAAvD,CAAJ;AACAzB,EAAAA,IAAI,CAACyB,MAAD,EAAS,MAAT,EAAoB,KAApB,EAA8B,SAA9B,EAA6C,KAA7C,EAAuD,SAAvD,CAAJ;AACD,CAZD","sourcesContent":["const plot = (data, elm, title, ysample, key, line) => $(elm).highcharts({\n  colors: [line],\n  chart: {\n    type: 'spline'\n  },\n  title: {\n    text: title\n  },\n  xAxis: {\n    type: 'datetime',\n    title: {\n      text: 'Date'\n    }\n  },\n  yAxis: {\n    title: {\n      text: ysample\n    }\n  },\n  series: [{\n    name: title,\n    data: _.map(data, function(row){\n      const date = new Date(row.datetime)\n      return [ date, row[key] ];\n    })\n  }]\n});\n\n$.get('https://raw.githubusercontent.com/yasuharu519/Weight/master/data.jsonl').done(function(data){\n  const parsed = data.trim().split('\\n').map(function(d) {\n    var parsed = JSON.parse(d)\n    if (parsed.fat) {\n      parsed.fat = parsed.fat / parsed.weight * 100\n    }\n    parsed.bmi = parsed.weight / 1.78 / 1.78\n    return parsed\n  })\n  plot(parsed, '#weight', 'Weight', 'Weight (kg)', 'weight', '#7cb5ec');\n  plot(parsed, '#fat',    'Fat',    '(%)',         'fat',    '#827eef');\n  plot(parsed, '#bmi',    'BMI',    '(score)',     'bmi',    '#d180f2');\n});\n\n\n"],"file":"index.js"}